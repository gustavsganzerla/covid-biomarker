# -*- coding: utf-8 -*-
"""covid_biomarker_predictor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y4c7pBXYXE3uzaIRmU-NHzMeqsRQBALg
"""

import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow.keras.datasets import cifar10
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPooling2D
from tensorflow.keras.losses import sparse_categorical_crossentropy
from tensorflow.keras.optimizers import Adam
from sklearn.model_selection import KFold
from numpy import mean
from patsy import dmatrices

import sys

!"{sys.executable}" -m pip install shap

import shap

"""The input file needs to be changed according to the model being tested.
I.e., outcomes of Boruta, Lasso Regression, and Information Gain.
"""

data = pd.read_csv("/content/drive/MyDrive/Postdoctoral research/Deep learn/SOFA/benchmark/ig_best.csv")

x = data.iloc[:, 1:3].values
y = data.iloc[:, 0].values

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 0)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)


inputs = np.concatenate((x_train, x_test), axis=0)
targets = np.concatenate((y_train, y_test), axis=0)

kfold = KFold(n_splits=5, shuffle=True)

y

from sklearn.metrics import confusion_matrix, accuracy_score, recall_score, roc_curve

shaps_train = []
shaps_test = []

fold_no = 1
for train, test in kfold.split(inputs, targets):

  trainX, testX = inputs[train], inputs[test]
  trainY, testY = targets[train], targets[test]
  ann = tf.keras.models.Sequential()
  ann.add(tf.keras.layers.Dense(units=20, activation = 'relu',  input_shape=(2,)))
  ann.add(tf.keras.layers.Dense(units=20, activation = 'relu'))
  ann.add(tf.keras.layers.Dense(units=20, activation = 'relu'))
  ann.add(tf.keras.layers.Dense(units=20, activation = 'relu'))
  ann.add(tf.keras.layers.Dense(units=1, activation = 'sigmoid'))

  ann.compile(optimizer='adam', loss='binary_crossentropy', metrics = ['accuracy', 'AUC', 'FalsePositives', 'FalseNegatives',
                                                                       'TruePositives', "TrueNegatives"])
  history = ann.fit(trainX, trainY, batch_size = 32, epochs = 100)
  hist_df = pd.DataFrame(history.history)
  hist_csv_file = 'history.csv'

  fold_no += 1

  with open(hist_csv_file+"_"+str(fold_no), mode='w+') as f:
    hist_df.to_csv(f)

  train_explainer = shap.KernelExplainer(ann.predict,trainX)
  shap_train_values = train_explainer.shap_values(trainX)
  shaps_train.append(shap_train_values)

  test_explainer = shap.KernelExplainer(ann.predict,testX)
  shap_test_values = test_explainer.shap_values(testX)
  shaps_test.append(shap_test_values)

shap_train_file = pd.DataFrame(shaps_train)
shap_train_csv_file = 'shap_train.csv'

with open(shap_train_csv_file, mode='w') as f:
    shap_train_file.to_csv(f)
