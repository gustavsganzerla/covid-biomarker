# -*- coding: utf-8 -*-
"""ann_publication.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UFe3PWAjijRD87ZtQQ_ROqH1n3CD3H2D
"""

import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow.keras.datasets import cifar10
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPooling2D
from tensorflow.keras.losses import sparse_categorical_crossentropy
from tensorflow.keras.optimizers import Adam
from sklearn.model_selection import KFold
from numpy import mean

"""The training/testing process is done with the first cohort"""

data = pd.read_csv("/content/drive/MyDrive/Postdoctoral research/Deep learn/SOFA/benchmark/cleveland.csv")

x = data.iloc[:, 1:29].values
y = data.iloc[:, 0].values

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 0)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_train = sc.fit_transform(x_train)
x_test = sc.transform(x_test)


inputs = np.concatenate((x_train, x_test), axis=0)
targets = np.concatenate((y_train, y_test), axis=0)

kfold = KFold(n_splits=5, shuffle=True)

from sklearn.metrics import confusion_matrix, accuracy_score, recall_score, precision_score, roc_curve

fold_no = 1
for train, test in kfold.split(inputs, targets):

  trainX, testX = inputs[train], inputs[test]
  trainY, testY = targets[train], targets[test]
  ann = tf.keras.models.Sequential()
  ann.add(tf.keras.layers.Dense(units=20, activation = 'relu',  input_shape=(28,)))
  ann.add(tf.keras.layers.Dense(units=20, activation = 'relu'))
  ann.add(tf.keras.layers.Dense(units=20, activation = 'relu'))
  ann.add(tf.keras.layers.Dense(units=20, activation = 'relu'))
  ann.add(tf.keras.layers.Dense(units=1, activation = 'sigmoid'))

  ann.compile(optimizer='adam', loss='binary_crossentropy', metrics = ['accuracy', 'AUC', 'FalsePositives', 'FalseNegatives',
                                                                       'TruePositives', "TrueNegatives"])
  ann.fit(trainX, trainY, batch_size = 32, epochs = 200)

hist_df = pd.DataFrame(ann.history)
  hist_csv_file = 'history.csv'

  with open(hist_csv_file, mode='w') as f:
    hist_df.to_csv(f)

validation = pd.read_csv("/content/drive/MyDrive//Deep learn/irish_patients.csv")
x_validation = validation.iloc[:,1:29].values

valid_table = ann.predict(sc.transform(x_validation))>0.5